{"ast":null,"code":"import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils.js\";\nimport { decayOffset, defaultRadius, defaultRetryCount, double, errorPrefix, half, millisecondsToSeconds, minRetries, minZ, none, randomColorValue, rollFactor, squareExp, tryCountIncrement } from \"./Utils/Constants.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { MoveDirection } from \"../Enums/Directions/MoveDirection.js\";\nimport { OutMode } from \"../Enums/Modes/OutMode.js\";\nimport { ParticleOutType } from \"../Enums/Types/ParticleOutType.js\";\nimport { PixelMode } from \"../Enums/Modes/PixelMode.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n  const effectData = effectOptions.options[effect];\n  if (!effectData) {\n    return;\n  }\n  return deepExtend({\n    close: effectOptions.close,\n    fill: effectOptions.fill\n  }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n  const shapeData = shapeOptions.options[shape];\n  if (!shapeData) {\n    return;\n  }\n  return deepExtend({\n    close: shapeOptions.close,\n    fill: shapeOptions.fill\n  }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n  const diameter = data.radius * double;\n  if (data.coord > data.maxCoord - diameter) {\n    data.setCb(-data.radius);\n  } else if (data.coord < diameter) {\n    data.setCb(data.radius);\n  }\n}\nexport class Particle {\n  constructor(engine, container) {\n    var _this = this;\n    this.container = container;\n    this._calcPosition = function (container, position, zIndex) {\n      let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultRetryCount;\n      for (const plugin of container.plugins.values()) {\n        const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, _this) : undefined;\n        if (pluginPos) {\n          return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n        }\n      }\n      const canvasSize = container.canvas.size,\n        exactPosition = calcExactPositionOrRandomFromSize({\n          size: canvasSize,\n          position: position\n        }),\n        pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n        radius = _this.getRadius(),\n        outModes = _this.options.move.outModes,\n        fixHorizontal = outMode => {\n          fixOutMode({\n            outMode,\n            checkModes: [OutMode.bounce],\n            coord: pos.x,\n            maxCoord: container.canvas.size.width,\n            setCb: value => pos.x += value,\n            radius\n          });\n        },\n        fixVertical = outMode => {\n          fixOutMode({\n            outMode,\n            checkModes: [OutMode.bounce],\n            coord: pos.y,\n            maxCoord: container.canvas.size.height,\n            setCb: value => pos.y += value,\n            radius\n          });\n        };\n      fixHorizontal(outModes.left ?? outModes.default);\n      fixHorizontal(outModes.right ?? outModes.default);\n      fixVertical(outModes.top ?? outModes.default);\n      fixVertical(outModes.bottom ?? outModes.default);\n      if (_this._checkOverlap(pos, tryCount)) {\n        return _this._calcPosition(container, undefined, zIndex, tryCount + tryCountIncrement);\n      }\n      return pos;\n    };\n    this._calculateVelocity = () => {\n      const baseVelocity = getParticleBaseVelocity(this.direction),\n        res = baseVelocity.copy(),\n        moveOptions = this.options.move;\n      if (moveOptions.direction === MoveDirection.inside || moveOptions.direction === MoveDirection.outside) {\n        return res;\n      }\n      const rad = degToRad(getRangeValue(moveOptions.angle.value)),\n        radOffset = degToRad(getRangeValue(moveOptions.angle.offset)),\n        range = {\n          left: radOffset - rad * half,\n          right: radOffset + rad * half\n        };\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= getRandom();\n      }\n      return res;\n    };\n    this._checkOverlap = function (pos) {\n      let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultRetryCount;\n      const collisionsOptions = _this.options.collisions,\n        radius = _this.getRadius();\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n      const overlapOptions = collisionsOptions.overlap;\n      if (overlapOptions.enable) {\n        return false;\n      }\n      const retries = overlapOptions.retries;\n      if (retries >= minRetries && tryCount > retries) {\n        throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n      }\n      return !!_this.container.particles.find(particle => getDistance(pos, particle.position) < radius + particle.getRadius());\n    };\n    this._getRollColor = color => {\n      if (!color || !this.roll || !this.backColor && !this.roll.alter) {\n        return color;\n      }\n      const backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor,\n        backSum = this.roll.horizontal ? Math.PI * half : none,\n        rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n      if (!rolled) {\n        return color;\n      }\n      if (this.backColor) {\n        return this.backColor;\n      }\n      if (this.roll.alter) {\n        return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n      }\n      return color;\n    };\n    this._initPosition = position => {\n      const container = this.container,\n        zIndexValue = getRangeValue(this.options.zIndex.value);\n      this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n      this.initialPosition = this.position.copy();\n      const canvasSize = container.canvas.size;\n      this.moveCenter = {\n        ...getPosition(this.options.move.center, canvasSize),\n        radius: this.options.move.center.radius ?? defaultRadius,\n        mode: this.options.move.center.mode ?? PixelMode.percent\n      };\n      this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n      switch (this.options.move.direction) {\n        case MoveDirection.inside:\n          this.outType = ParticleOutType.inside;\n          break;\n        case MoveDirection.outside:\n          this.outType = ParticleOutType.outside;\n          break;\n      }\n      this.offset = Vector.origin;\n    };\n    this._engine = engine;\n  }\n  destroy(override) {\n    if (this.unbreakable || this.destroyed) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.slow.inRange = false;\n    const container = this.container,\n      pathGenerator = this.pathGenerator,\n      shapeDrawer = container.shapeDrawers.get(this.shape);\n    shapeDrawer?.particleDestroy?.(this);\n    for (const plugin of container.plugins.values()) {\n      plugin.particleDestroyed?.(this, override);\n    }\n    for (const updater of container.particles.updaters) {\n      updater.particleDestroyed?.(this, override);\n    }\n    pathGenerator?.reset(this);\n    this._engine.dispatchEvent(EventType.particleDestroyed, {\n      container: this.container,\n      data: {\n        particle: this\n      }\n    });\n  }\n  draw(delta) {\n    const container = this.container,\n      canvas = container.canvas;\n    for (const plugin of container.plugins.values()) {\n      canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    canvas.drawParticle(this, delta);\n  }\n  getFillColor() {\n    return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n  }\n  getMass() {\n    return this.getRadius() ** squareExp * Math.PI * half;\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    return this.bubble.radius ?? this.size.value;\n  }\n  getStrokeColor() {\n    return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n  }\n  init(id, position, overrideOptions, group) {\n    const container = this.container,\n      engine = this._engine;\n    this.id = id;\n    this.group = group;\n    this.effectClose = true;\n    this.effectFill = true;\n    this.shapeClose = true;\n    this.shapeFill = true;\n    this.pathRotation = false;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.isRotating = false;\n    this.rotation = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = ParticleOutType.normal;\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n      mainOptions = container.actualOptions,\n      particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n      {\n        reduceDuplicates\n      } = particlesOptions,\n      effectType = particlesOptions.effect.type,\n      shapeType = particlesOptions.shape.type;\n    this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n    this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n    const effectOptions = particlesOptions.effect,\n      shapeOptions = particlesOptions.shape;\n    if (overrideOptions) {\n      if (overrideOptions.effect?.type) {\n        const overrideEffectType = overrideOptions.effect.type,\n          effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n        if (effect) {\n          this.effect = effect;\n          effectOptions.load(overrideOptions.effect);\n        }\n      }\n      if (overrideOptions.shape?.type) {\n        const overrideShapeType = overrideOptions.shape.type,\n          shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n        if (shape) {\n          this.shape = shape;\n          shapeOptions.load(overrideOptions.shape);\n        }\n      }\n    }\n    if (this.effect === randomColorValue) {\n      const availableEffects = [...this.container.effectDrawers.keys()];\n      this.effect = availableEffects[Math.floor(Math.random() * availableEffects.length)];\n    }\n    if (this.shape === randomColorValue) {\n      const availableShapes = [...this.container.shapeDrawers.keys()];\n      this.shape = availableShapes[Math.floor(Math.random() * availableShapes.length)];\n    }\n    this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n    this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n    particlesOptions.load(overrideOptions);\n    const effectData = this.effectData;\n    if (effectData) {\n      particlesOptions.load(effectData.particles);\n    }\n    const shapeData = this.shapeData;\n    if (shapeData) {\n      particlesOptions.load(shapeData.particles);\n    }\n    const interactivity = new Interactivity(engine, container);\n    interactivity.load(container.actualOptions.interactivity);\n    interactivity.load(particlesOptions.interactivity);\n    this.interactivity = interactivity;\n    this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n    this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n    this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n    this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n    this.options = particlesOptions;\n    const pathOptions = this.options.move.path;\n    this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n    if (pathOptions.generator) {\n      this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n      if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n        this.pathGenerator.init(container);\n      }\n    }\n    container.retina.initParticle(this);\n    this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n    this.bubble = {\n      inRange: false\n    };\n    this.slow = {\n      inRange: false,\n      factor: 1\n    };\n    this._initPosition(position);\n    this.initialVelocity = this._calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n    const particles = container.particles;\n    particles.setLastZIndex(this.position.z);\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let effectDrawer = container.effectDrawers.get(this.effect);\n    if (!effectDrawer) {\n      effectDrawer = this._engine.getEffectDrawer(this.effect);\n      if (effectDrawer) {\n        container.effectDrawers.set(this.effect, effectDrawer);\n      }\n    }\n    if (effectDrawer?.loadEffect) {\n      effectDrawer.loadEffect(this);\n    }\n    let shapeDrawer = container.shapeDrawers.get(this.shape);\n    if (!shapeDrawer) {\n      shapeDrawer = this._engine.getShapeDrawer(this.shape);\n      if (shapeDrawer) {\n        container.shapeDrawers.set(this.shape, shapeDrawer);\n      }\n    }\n    if (shapeDrawer?.loadShape) {\n      shapeDrawer.loadShape(this);\n    }\n    const sideCountFunc = shapeDrawer?.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.spawning = false;\n    this.shadowColor = rangeColorToRgb(this._engine, this.options.shadow.color);\n    for (const updater of particles.updaters) {\n      updater.init(this);\n    }\n    for (const mover of particles.movers) {\n      mover.init?.(this);\n    }\n    effectDrawer?.particleInit?.(container, this);\n    shapeDrawer?.particleInit?.(container, this);\n    for (const plugin of container.plugins.values()) {\n      plugin.particleCreated?.(this);\n    }\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n      canvasSize = this.container.canvas.size,\n      position = this.position;\n    return position.x >= -radius && position.y >= -radius && position.y <= canvasSize.height + radius && position.x <= canvasSize.width + radius;\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  reset() {\n    for (const updater of this.container.particles.updaters) {\n      updater.reset?.(this);\n    }\n  }\n}","map":{"version":3,"names":["Vector","Vector3d","calcExactPositionOrRandomFromSize","clamp","degToRad","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeValue","randomInRange","setRangeValue","decayOffset","defaultRadius","defaultRetryCount","double","errorPrefix","half","millisecondsToSeconds","minRetries","minZ","none","randomColorValue","rollFactor","squareExp","tryCountIncrement","deepExtend","getPosition","initParticleNumericAnimationValue","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","EventType","Interactivity","MoveDirection","OutMode","ParticleOutType","PixelMode","alterHsl","loadParticlesOptions","loadEffectData","effect","effectOptions","id","reduceDuplicates","effectData","options","close","fill","loadShapeData","shape","shapeOptions","shapeData","fixOutMode","data","outMode","checkModes","diameter","radius","coord","maxCoord","setCb","Particle","constructor","engine","container","_this","_calcPosition","position","zIndex","tryCount","arguments","length","undefined","plugin","plugins","values","pluginPos","particlePosition","create","x","y","canvasSize","canvas","size","exactPosition","pos","getRadius","outModes","move","fixHorizontal","bounce","width","value","fixVertical","height","left","default","right","top","bottom","_checkOverlap","_calculateVelocity","baseVelocity","direction","res","copy","moveOptions","inside","outside","rad","angle","radOffset","offset","range","straight","random","speed","collisionsOptions","collisions","enable","overlapOptions","overlap","retries","Error","particles","find","particle","_getRollColor","color","roll","backColor","alter","backFactor","horizontal","vertical","backSum","Math","PI","rolled","floor","type","_initPosition","zIndexValue","zLayers","initialPosition","moveCenter","center","mode","percent","outType","origin","_engine","destroy","override","unbreakable","destroyed","bubble","inRange","slow","pathGenerator","shapeDrawer","shapeDrawers","get","particleDestroy","particleDestroyed","updater","updaters","reset","dispatchEvent","draw","delta","drawParticlePlugin","drawParticle","getFillColor","getMass","z","getStrokeColor","strokeColor","init","overrideOptions","group","effectClose","effectFill","shapeClose","shapeFill","pathRotation","lastPathTime","isRotating","rotation","misplaced","retina","maxDistance","normal","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","effectType","shapeType","overrideEffectType","load","overrideShapeType","availableEffects","effectDrawers","keys","availableShapes","interactivity","pathOptions","path","pathDelay","delay","generator","getPathGenerator","addPath","initParticle","factor","initialVelocity","velocity","moveDecay","decay","setLastZIndex","zIndexFactor","sides","effectDrawer","getEffectDrawer","set","loadEffect","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","mover","movers","particleInit","particleCreated","isInsideCanvas","isVisible"],"sources":["/Users/woojin/Downloads/사주/client/node_modules/@tsparticles/engine/browser/Core/Particle.js"],"sourcesContent":["import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils.js\";\nimport { decayOffset, defaultRadius, defaultRetryCount, double, errorPrefix, half, millisecondsToSeconds, minRetries, minZ, none, randomColorValue, rollFactor, squareExp, tryCountIncrement, } from \"./Utils/Constants.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { MoveDirection } from \"../Enums/Directions/MoveDirection.js\";\nimport { OutMode } from \"../Enums/Modes/OutMode.js\";\nimport { ParticleOutType } from \"../Enums/Types/ParticleOutType.js\";\nimport { PixelMode } from \"../Enums/Modes/PixelMode.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return deepExtend({\n        close: effectOptions.close,\n        fill: effectOptions.fill,\n    }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill,\n    }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * double;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nexport class Particle {\n    constructor(engine, container) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\n            for (const plugin of container.plugins.values()) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [OutMode.bounce],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [OutMode.bounce],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                return this._calcPosition(container, undefined, zIndex, tryCount + tryCountIncrement);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === MoveDirection.inside || moveOptions.direction === MoveDirection.outside) {\n                return res;\n            }\n            const rad = degToRad(getRangeValue(moveOptions.angle.value)), radOffset = degToRad(getRangeValue(moveOptions.angle.offset)), range = {\n                left: radOffset - rad * half,\n                right: radOffset + rad * half,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries;\n            if (retries >= minRetries && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find(particle => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = color => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = position => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value);\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? defaultRadius,\n                mode: this.options.move.center.mode ?? PixelMode.percent,\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case MoveDirection.inside:\n                    this.outType = ParticleOutType.inside;\n                    break;\n                case MoveDirection.outside:\n                    this.outType = ParticleOutType.outside;\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._engine = engine;\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer?.particleDestroy?.(this);\n        for (const plugin of container.plugins.values()) {\n            plugin.particleDestroyed?.(this, override);\n        }\n        for (const updater of container.particles.updaters) {\n            updater.particleDestroyed?.(this, override);\n        }\n        pathGenerator?.reset(this);\n        this._engine.dispatchEvent(EventType.particleDestroyed, {\n            container: this.container,\n            data: {\n                particle: this,\n            },\n        });\n    }\n    draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const plugin of container.plugins.values()) {\n            canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** squareExp * Math.PI * half;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.isRotating = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = ParticleOutType.normal;\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), { reduceDuplicates } = particlesOptions, effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type;\n        this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            if (overrideOptions.effect?.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if (overrideOptions.shape?.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        if (this.effect === randomColorValue) {\n            const availableEffects = [...this.container.effectDrawers.keys()];\n            this.effect = availableEffects[Math.floor(Math.random() * availableEffects.length)];\n        }\n        if (this.shape === randomColorValue) {\n            const availableShapes = [...this.container.shapeDrawers.keys()];\n            this.shape = availableShapes[Math.floor(Math.random() * availableShapes.length)];\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer?.loadEffect) {\n            effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer?.loadShape) {\n            shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this._engine, this.options.shadow.color);\n        for (const updater of particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of particles.movers) {\n            mover.init?.(this);\n        }\n        effectDrawer?.particleInit?.(container, this);\n        shapeDrawer?.particleInit?.(container, this);\n        for (const plugin of container.plugins.values()) {\n            plugin.particleCreated?.(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset?.(this);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}