{"ast":null,"code":"import { countOffset, defaultDensityFactor, defaultRemoveQuantity, deleteCount, errorPrefix, lengthOffset, manualCount, minCount, minIndex, minLimit, posOffset, qTreeCapacity, sizeFactor, squareExp } from \"./Utils/Constants.js\";\nimport { getLogger, getPosition } from \"../Utils/Utils.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { InteractionManager } from \"./Utils/InteractionManager.js\";\nimport { LimitMode } from \"../Enums/Modes/LimitMode.js\";\nimport { Particle } from \"./Particle.js\";\nimport { Point } from \"./Utils/Point.js\";\nimport { QuadTree } from \"./Utils/QuadTree.js\";\nimport { Rectangle } from \"./Utils/Ranges.js\";\nconst qTreeRectangle = canvasSize => {\n  const {\n    height,\n    width\n  } = canvasSize;\n  return new Rectangle(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\n};\nexport class Particles {\n  constructor(engine, container) {\n    var _this = this;\n    this._addToPool = function () {\n      _this._pool.push(...arguments);\n    };\n    this._applyDensity = (options, manualCount, group) => {\n      const numberOptions = options.number;\n      if (!options.number.density?.enable) {\n        if (group === undefined) {\n          this._limit = numberOptions.limit.value;\n        } else if (numberOptions.limit) {\n          this._groupLimits.set(group, numberOptions.limit.value);\n        }\n        return;\n      }\n      const densityFactor = this._initDensityFactor(numberOptions.density),\n        optParticlesNumber = numberOptions.value,\n        optParticlesLimit = numberOptions.limit.value > minLimit ? numberOptions.limit.value : optParticlesNumber,\n        particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n        particlesCount = Math.min(this.count, this.filter(t => t.group === group).length);\n      if (group === undefined) {\n        this._limit = numberOptions.limit.value * densityFactor;\n      } else {\n        this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\n      }\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    };\n    this._initDensityFactor = densityOptions => {\n      const container = this._container;\n      if (!container.canvas.element || !densityOptions.enable) {\n        return defaultDensityFactor;\n      }\n      const canvas = container.canvas.element,\n        pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.height * densityOptions.width * pxRatio ** squareExp);\n    };\n    this._pushParticle = (position, overrideOptions, group, initializer) => {\n      try {\n        let particle = this._pool.pop();\n        if (!particle) {\n          particle = new Particle(this._engine, this._container);\n        }\n        particle.init(this._nextId, position, overrideOptions, group);\n        let canAdd = true;\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n        if (!canAdd) {\n          return;\n        }\n        this._array.push(particle);\n        this._zArray.push(particle);\n        this._nextId++;\n        this._engine.dispatchEvent(EventType.particleAdded, {\n          container: this._container,\n          data: {\n            particle\n          }\n        });\n        return particle;\n      } catch (e) {\n        getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n      }\n    };\n    this._removeParticle = (index, group, override) => {\n      const particle = this._array[index];\n      if (!particle || particle.group !== group) {\n        return false;\n      }\n      const zIdx = this._zArray.indexOf(particle);\n      this._array.splice(index, deleteCount);\n      this._zArray.splice(zIdx, deleteCount);\n      particle.destroy(override);\n      this._engine.dispatchEvent(EventType.particleRemoved, {\n        container: this._container,\n        data: {\n          particle\n        }\n      });\n      this._addToPool(particle);\n      return true;\n    };\n    this._engine = engine;\n    this._container = container;\n    this._nextId = 0;\n    this._array = [];\n    this._zArray = [];\n    this._pool = [];\n    this._limit = 0;\n    this._groupLimits = new Map();\n    this._needsSort = false;\n    this._lastZIndex = 0;\n    this._interactionManager = new InteractionManager(engine, container);\n    this._pluginsInitialized = false;\n    const canvasSize = container.canvas.size;\n    this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n    this.movers = [];\n    this.updaters = [];\n  }\n  get count() {\n    return this._array.length;\n  }\n  addManualParticles() {\n    const container = this._container,\n      options = container.actualOptions;\n    options.manualParticles.forEach(p => this.addParticle(p.position ? getPosition(p.position, container.canvas.size) : undefined, p.options));\n  }\n  addParticle(position, overrideOptions, group, initializer) {\n    const limitMode = this._container.actualOptions.particles.number.limit.mode,\n      limit = group === undefined ? this._limit : this._groupLimits.get(group) ?? this._limit,\n      currentCount = this.count;\n    if (limit > minLimit) {\n      switch (limitMode) {\n        case LimitMode.delete:\n          {\n            const countToRemove = currentCount + countOffset - limit;\n            if (countToRemove > minCount) {\n              this.removeQuantity(countToRemove);\n            }\n            break;\n          }\n        case LimitMode.wait:\n          if (currentCount >= limit) {\n            return;\n          }\n          break;\n      }\n    }\n    return this._pushParticle(position, overrideOptions, group, initializer);\n  }\n  clear() {\n    this._array = [];\n    this._zArray = [];\n    this._pluginsInitialized = false;\n  }\n  destroy() {\n    this._array = [];\n    this._zArray = [];\n    this.movers = [];\n    this.updaters = [];\n  }\n  draw(delta) {\n    const container = this._container,\n      canvas = container.canvas;\n    canvas.clear();\n    this.update(delta);\n    for (const plugin of container.plugins.values()) {\n      canvas.drawPlugin(plugin, delta);\n    }\n    for (const p of this._zArray) {\n      p.draw(delta);\n    }\n  }\n  filter(condition) {\n    return this._array.filter(condition);\n  }\n  find(condition) {\n    return this._array.find(condition);\n  }\n  get(index) {\n    return this._array[index];\n  }\n  handleClickMode(mode) {\n    this._interactionManager.handleClickMode(mode);\n  }\n  async init() {\n    const container = this._container,\n      options = container.actualOptions;\n    this._lastZIndex = 0;\n    this._needsSort = false;\n    await this.initPlugins();\n    let handled = false;\n    for (const plugin of container.plugins.values()) {\n      handled = plugin.particlesInitialization?.() ?? handled;\n      if (handled) {\n        break;\n      }\n    }\n    this.addManualParticles();\n    if (!handled) {\n      const particlesOptions = options.particles,\n        groups = particlesOptions.groups;\n      for (const group in groups) {\n        const groupOptions = groups[group];\n        for (let i = this.count, j = 0; j < groupOptions.number?.value && i < particlesOptions.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n      for (let i = this.count; i < particlesOptions.number.value; i++) {\n        this.addParticle();\n      }\n    }\n  }\n  async initPlugins() {\n    if (this._pluginsInitialized) {\n      return;\n    }\n    const container = this._container;\n    this.movers = await this._engine.getMovers(container, true);\n    this.updaters = await this._engine.getUpdaters(container, true);\n    await this._interactionManager.init();\n    for (const pathGenerator of container.pathGenerators.values()) {\n      pathGenerator.init(container);\n    }\n  }\n  push(nb, mouse, overrideOptions, group) {\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse?.position, overrideOptions, group);\n    }\n  }\n  async redraw() {\n    this.clear();\n    await this.init();\n    this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n  remove(particle, group, override) {\n    this.removeAt(this._array.indexOf(particle), undefined, group, override);\n  }\n  removeAt(index) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultRemoveQuantity;\n    let group = arguments.length > 2 ? arguments[2] : undefined;\n    let override = arguments.length > 3 ? arguments[3] : undefined;\n    if (index < minIndex || index > this.count) {\n      return;\n    }\n    let deleted = 0;\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      if (this._removeParticle(i, group, override)) {\n        i--;\n        deleted++;\n      }\n    }\n  }\n  removeQuantity(quantity, group) {\n    this.removeAt(minIndex, quantity, group);\n  }\n  setDensity() {\n    const options = this._container.actualOptions,\n      groups = options.particles.groups;\n    for (const group in groups) {\n      this._applyDensity(groups[group], manualCount, group);\n    }\n    this._applyDensity(options.particles, options.manualParticles.length);\n  }\n  setLastZIndex(zIndex) {\n    this._lastZIndex = zIndex;\n    this._needsSort = this._needsSort || this._lastZIndex < zIndex;\n  }\n  setResizeFactor(factor) {\n    this._resizeFactor = factor;\n  }\n  update(delta) {\n    const container = this._container,\n      particlesToDelete = new Set();\n    this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n    for (const pathGenerator of container.pathGenerators.values()) {\n      pathGenerator.update();\n    }\n    for (const plugin of container.plugins.values()) {\n      plugin.update?.(delta);\n    }\n    const resizeFactor = this._resizeFactor;\n    for (const particle of this._array) {\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n        particle.initialPosition.x *= resizeFactor.width;\n        particle.initialPosition.y *= resizeFactor.height;\n      }\n      particle.ignoresResizeRatio = false;\n      this._interactionManager.reset(particle);\n      for (const plugin of this._container.plugins.values()) {\n        if (particle.destroyed) {\n          break;\n        }\n        plugin.particleUpdate?.(particle, delta);\n      }\n      for (const mover of this.movers) {\n        if (mover.isEnabled(particle)) {\n          mover.move(particle, delta);\n        }\n      }\n      if (particle.destroyed) {\n        particlesToDelete.add(particle);\n        continue;\n      }\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n    if (particlesToDelete.size) {\n      const checkDelete = p => !particlesToDelete.has(p);\n      this._array = this.filter(checkDelete);\n      this._zArray = this._zArray.filter(checkDelete);\n      for (const particle of particlesToDelete) {\n        this._engine.dispatchEvent(EventType.particleRemoved, {\n          container: this._container,\n          data: {\n            particle\n          }\n        });\n      }\n      this._addToPool(...particlesToDelete);\n    }\n    this._interactionManager.externalInteract(delta);\n    for (const particle of this._array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n      if (!particle.destroyed && !particle.spawning) {\n        this._interactionManager.particlesInteract(particle, delta);\n      }\n    }\n    delete this._resizeFactor;\n    if (this._needsSort) {\n      const zArray = this._zArray;\n      zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this._lastZIndex = zArray[zArray.length - lengthOffset].position.z;\n      this._needsSort = false;\n    }\n  }\n}","map":{"version":3,"names":["countOffset","defaultDensityFactor","defaultRemoveQuantity","deleteCount","errorPrefix","lengthOffset","manualCount","minCount","minIndex","minLimit","posOffset","qTreeCapacity","sizeFactor","squareExp","getLogger","getPosition","EventType","InteractionManager","LimitMode","Particle","Point","QuadTree","Rectangle","qTreeRectangle","canvasSize","height","width","Particles","constructor","engine","container","_this","_addToPool","_pool","push","arguments","_applyDensity","options","group","numberOptions","number","density","enable","undefined","_limit","limit","value","_groupLimits","set","densityFactor","_initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","Math","min","particlesCount","count","filter","t","length","abs","removeQuantity","densityOptions","_container","canvas","element","pxRatio","retina","pixelRatio","_pushParticle","position","overrideOptions","initializer","particle","pop","_engine","init","_nextId","canAdd","_array","_zArray","dispatchEvent","particleAdded","data","e","warning","_removeParticle","index","override","zIdx","indexOf","splice","destroy","particleRemoved","Map","_needsSort","_lastZIndex","_interactionManager","_pluginsInitialized","size","quadTree","movers","updaters","addManualParticles","actualOptions","manualParticles","forEach","p","addParticle","limitMode","particles","mode","get","currentCount","delete","countToRemove","wait","clear","draw","delta","update","plugin","plugins","values","drawPlugin","condition","find","handleClickMode","initPlugins","handled","particlesInitialization","particlesOptions","groups","groupOptions","i","j","getMovers","getUpdaters","pathGenerator","pathGenerators","nb","mouse","redraw","factor","remove","removeAt","quantity","deleted","setDensity","setLastZIndex","zIndex","setResizeFactor","_resizeFactor","particlesToDelete","Set","resizeFactor","ignoresResizeRatio","x","y","initialPosition","reset","destroyed","particleUpdate","mover","isEnabled","move","add","insert","checkDelete","has","externalInteract","updater","spawning","particlesInteract","zArray","sort","a","b","z","id"],"sources":["/Users/woojin/Downloads/사주/client/node_modules/@tsparticles/engine/browser/Core/Particles.js"],"sourcesContent":["import { countOffset, defaultDensityFactor, defaultRemoveQuantity, deleteCount, errorPrefix, lengthOffset, manualCount, minCount, minIndex, minLimit, posOffset, qTreeCapacity, sizeFactor, squareExp, } from \"./Utils/Constants.js\";\nimport { getLogger, getPosition } from \"../Utils/Utils.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { InteractionManager } from \"./Utils/InteractionManager.js\";\nimport { LimitMode } from \"../Enums/Modes/LimitMode.js\";\nimport { Particle } from \"./Particle.js\";\nimport { Point } from \"./Utils/Point.js\";\nimport { QuadTree } from \"./Utils/QuadTree.js\";\nimport { Rectangle } from \"./Utils/Ranges.js\";\nconst qTreeRectangle = (canvasSize) => {\n    const { height, width } = canvasSize;\n    return new Rectangle(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._addToPool = (...particles) => {\n            this._pool.push(...particles);\n        };\n        this._applyDensity = (options, manualCount, group) => {\n            const numberOptions = options.number;\n            if (!options.number.density?.enable) {\n                if (group === undefined) {\n                    this._limit = numberOptions.limit.value;\n                }\n                else if (numberOptions.limit) {\n                    this._groupLimits.set(group, numberOptions.limit.value);\n                }\n                return;\n            }\n            const densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit.value > minLimit ? numberOptions.limit.value : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter(t => t.group === group).length);\n            if (group === undefined) {\n                this._limit = numberOptions.limit.value * densityFactor;\n            }\n            else {\n                this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\n            }\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = densityOptions => {\n            const container = this._container;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return defaultDensityFactor;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.height * densityOptions.width * pxRatio ** squareExp);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this._pool.pop();\n                if (!particle) {\n                    particle = new Particle(this._engine, this._container);\n                }\n                particle.init(this._nextId, position, overrideOptions, group);\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(EventType.particleAdded, {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n            }\n        };\n        this._removeParticle = (index, group, override) => {\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            const zIdx = this._zArray.indexOf(particle);\n            this._array.splice(index, deleteCount);\n            this._zArray.splice(zIdx, deleteCount);\n            particle.destroy(override);\n            this._engine.dispatchEvent(EventType.particleRemoved, {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n            this._addToPool(particle);\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this._pool = [];\n        this._limit = 0;\n        this._groupLimits = new Map();\n        this._needsSort = false;\n        this._lastZIndex = 0;\n        this._interactionManager = new InteractionManager(engine, container);\n        this._pluginsInitialized = false;\n        const canvasSize = container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = [];\n        this.updaters = [];\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        options.manualParticles.forEach(p => this.addParticle(p.position ? getPosition(p.position, container.canvas.size) : undefined, p.options));\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const limitMode = this._container.actualOptions.particles.number.limit.mode, limit = group === undefined ? this._limit : (this._groupLimits.get(group) ?? this._limit), currentCount = this.count;\n        if (limit > minLimit) {\n            switch (limitMode) {\n                case LimitMode.delete: {\n                    const countToRemove = currentCount + countOffset - limit;\n                    if (countToRemove > minCount) {\n                        this.removeQuantity(countToRemove);\n                    }\n                    break;\n                }\n                case LimitMode.wait:\n                    if (currentCount >= limit) {\n                        return;\n                    }\n                    break;\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n        this._pluginsInitialized = false;\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    draw(delta) {\n        const container = this._container, canvas = container.canvas;\n        canvas.clear();\n        this.update(delta);\n        for (const plugin of container.plugins.values()) {\n            canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    get(index) {\n        return this._array[index];\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions;\n        this._lastZIndex = 0;\n        this._needsSort = false;\n        await this.initPlugins();\n        let handled = false;\n        for (const plugin of container.plugins.values()) {\n            handled = plugin.particlesInitialization?.() ?? handled;\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            const particlesOptions = options.particles, groups = particlesOptions.groups;\n            for (const group in groups) {\n                const groupOptions = groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < particlesOptions.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < particlesOptions.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    async initPlugins() {\n        if (this._pluginsInitialized) {\n            return;\n        }\n        const container = this._container;\n        this.movers = await this._engine.getMovers(container, true);\n        this.updaters = await this._engine.getUpdaters(container, true);\n        await this._interactionManager.init();\n        for (const pathGenerator of container.pathGenerators.values()) {\n            pathGenerator.init(container);\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n    }\n    async redraw() {\n        this.clear();\n        await this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = defaultRemoveQuantity, group, override) {\n        if (index < minIndex || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            if (this._removeParticle(i, group, override)) {\n                i--;\n                deleted++;\n            }\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(minIndex, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups;\n        for (const group in groups) {\n            this._applyDensity(groups[group], manualCount, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    setLastZIndex(zIndex) {\n        this._lastZIndex = zIndex;\n        this._needsSort = this._needsSort || this._lastZIndex < zIndex;\n    }\n    setResizeFactor(factor) {\n        this._resizeFactor = factor;\n    }\n    update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const pathGenerator of container.pathGenerators.values()) {\n            pathGenerator.update();\n        }\n        for (const plugin of container.plugins.values()) {\n            plugin.update?.(delta);\n        }\n        const resizeFactor = this._resizeFactor;\n        for (const particle of this._array) {\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            this._interactionManager.reset(particle);\n            for (const plugin of this._container.plugins.values()) {\n                if (particle.destroyed) {\n                    break;\n                }\n                plugin.particleUpdate?.(particle, delta);\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p) => !particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            for (const particle of particlesToDelete) {\n                this._engine.dispatchEvent(EventType.particleRemoved, {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n            }\n            this._addToPool(...particlesToDelete);\n        }\n        this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete this._resizeFactor;\n        if (this._needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this._lastZIndex = zArray[zArray.length - lengthOffset].position.z;\n            this._needsSort = false;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}